package com.ssafy.pjt.Controller;

import com.ssafy.pjt.Repository.EntrantRepository;
import com.ssafy.pjt.Repository.MemberRepository;
import com.ssafy.pjt.Repository.RoomRepository;
import com.ssafy.pjt.dto.Entrant;
import com.ssafy.pjt.dto.Member;
import com.ssafy.pjt.dto.Room;
import com.ssafy.pjt.dto.Token;
import com.ssafy.pjt.dto.request.LoginDto;
import com.ssafy.pjt.dto.request.insertEntrantDto;
import com.ssafy.pjt.dto.request.insertRoomDto;
import com.ssafy.pjt.dto.request.updateRoomDto;
import com.ssafy.pjt.jwt.JwtTokenUtil;
import com.ssafy.pjt.service.JwtUserDetailsService;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.swagger.annotations.ApiOperation;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationRunner;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

@RestController
@CrossOrigin
@RequestMapping("/api/entrant")
public class EntrantController {
    private Logger logger = LoggerFactory.getLogger(ApplicationRunner.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EntrantRepository entrantRepository;
    
    @Autowired
    private MemberRepository memberRepository;
    
    @Autowired
    RedisTemplate<String, Object> redisTemplate;

    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    @Autowired
    private JwtUserDetailsService userDetailsService;

    @Autowired
    private AuthenticationManager am;
    
    @Autowired
    private PasswordEncoder bcryptEncoder;
    
	    @ApiOperation(value = "방  리스트 조회")
	    @GetMapping(path="/findAll")
	    public Iterable<Entrant> findAll() {
	        return entrantRepository.findAll();
	    }
//    @ApiOperation(value = "개설자 uid로 방 조회")
//    @GetMapping(path="/findByUid")
//    public List<Room> findByUid(@RequestParam int uid, @RequestParam String password) {
//    	return roomRepository.findByUid(uid);
//    }
//    
//    @ApiOperation(value = "개설자 uid로 방 조회")
//    @GetMapping(path="/findByRid")
//    public ResponseEntity<?> findByrid(@RequestParam int rid, @RequestParam String password) {
//    	Room room = roomRepository.findByRid(rid);
//    	if(room.getRoomState().equals("준비")) {
//    		new ResponseEntity<String>("준비중입니다.",HttpStatus.NO_CONTENT);
//    	}else {
//    		if(room.getRoomType().equals("공개")) {
//    			return new ResponseEntity<Room>(room,HttpStatus.OK);
//    		}else {   			
//    			if( password.equals("")) {
//    				password = bcryptEncoder.encode(password);
//    				if(room.getRoomPassword().equals(password)) {
//    					new ResponseEntity<Room>(room,HttpStatus.OK);
//    				}else {
//    					new ResponseEntity<String>("비밀번호가 일치하지 안습니다.",HttpStatus.NO_CONTENT);
//    				}   				
//    			}else {
//    				new ResponseEntity<String>("비밀번호를 입력하세요",HttpStatus.NO_CONTENT);
//    			}
//    		}
//    	}
//    	return new ResponseEntity<Room>(room,HttpStatus.OK);
//    }
    
    @ApiOperation(value = "참가자 생성")
    @Transactional
    @PostMapping(path="/insert")
    public ResponseEntity<?> insertByUid(@RequestBody insertEntrantDto insertRoom) {
    	Entrant entran = new Entrant();
    	
    	entran.setUid(insertRoom.getUid());
    	entran.setRid(insertRoom.getRid());
  	
    	try {
    		entran = entrantRepository.save(entran);
    	}catch (Exception e) {
    		new ResponseEntity<String>("fail",HttpStatus.BAD_REQUEST);
		}
    	return new ResponseEntity<Entrant>(entran,HttpStatus.OK);
    }
    
    @ApiOperation(value = "참가자 삭제 삭제")
    @Transactional
    @DeleteMapping(path="/deleteByEid")
    public ResponseEntity<?> deleteByUid(@RequestParam int eid) {
    	try {
    		entrantRepository.deleteByEid(eid);
        }catch (Exception e) {
        	return new ResponseEntity<String>("fail",HttpStatus.BAD_REQUEST);
		}   	
    	return new ResponseEntity<String>("success",HttpStatus.OK);
    }
    
    @ApiOperation(value = "참가자 수정")
    @Transactional
    @PutMapping(path="/updateByEid")
    public ResponseEntity<?> updateTheRoom(@RequestBody Entrant entranDto) {
    	Entrant entrant = entrantRepository.findByEid(entranDto.getEid());
    	
        if(entrant == null) new ResponseEntity<String>("참가자 명단이 없습니다",HttpStatus.OK);
        
        //Member member = memberRepository.findByUid(entrant.getUid());
        //엑세스 토큰을 받아서 개설자인지 확인을 해야될까?
        
    	entrant.setUid(entranDto.getUid());
    	entrant.setRid(entranDto.getRid());
    	
    	try {
    		entrantRepository.save(entrant);
    	}catch (Exception e) {
    		new ResponseEntity<String>("fail",HttpStatus.BAD_GATEWAY);
		}
    	return new ResponseEntity<String>("success",HttpStatus.OK);
    }
}
